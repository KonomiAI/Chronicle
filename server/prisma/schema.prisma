// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// For formatting and linting, install the vs-code prisma plugin

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Activity {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      Decimal
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Feature {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SPECIFIED
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  permissions Json
  staff       Staff[]  @relation(fields: [staffIds], references: [id])
  staffIds    String[] @db.ObjectId
}

model Staff {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String            @unique
  dateOfBirth String?
  authKey     String
  gender      Gender            @default(NOT_SPECIFIED)
  isSuperUser Boolean           @default(false)
  isSuspended Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isDeleted   Boolean           @default(false)
  roles       Role[]            @relation(fields: [roleIds], references: [id])
  roleIds     String[]          @db.ObjectId
  responses   ResponseVersion[]
}

model Variant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  price       Int
  barcode     String
  isAvailable Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product? @relation(fields: [productId], references: [id])
  productId   String
}

model Product {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  brand      String
  imageUrl   String[]
  isArchived Boolean   @default(false)
  variants   Variant[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Ip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ip          String   @unique
  description String
  createdAt   DateTime @default(now())
}

enum FormPurpose {
  INVENTORY
  CUSTOMER
  STAFF
  ACTIVITY_ENTRY
}

model Form {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  descrition        String?
  purpose           FormPurpose?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  allFormVersions   FormVersion[] @relation("allFormVersions")
  latestFormVersion FormVersion   @relation("latestFormVersion", fields: [latestFormId], references: [id])
  latestFormId      String        @unique
}

model FormVersion {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       Json
  version    DateTime @default(now())
  // link to the owner form. On update of primary key do not do anything.
  // The version should not be assigned to another form.
  form       Form     @relation("allFormVersions", references: [id], fields: [formId], onUpdate: NoAction)
  latestForm Form?    @relation("latestFormVersion")
  formId     String
}

model Response {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  allResponseVersions     ResponseVersion[] @relation("allResponseVersions")
  latestResponseVersion   ResponseVersion   @relation("latestResponseVersion", fields: [latestResponseVersionId], references: [id])
  latestResponseVersionId String            @db.ObjectId@unique
}

model ResponseVersion {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  body           Json
  version        DateTime  @default(now())
  respondent     Staff     @relation(references: [id], fields: [staffId])
  staffId        String    @db.ObjectId
  latestResponse Response? @relation("latestResponseVersion")
  response       Response  @relation("allResponseVersions", references: [id], onUpdate: NoAction, fields: [responseId])
  responseId     String    @db.ObjectId
}
