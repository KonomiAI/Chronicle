// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// For formatting and linting, install the vs-code prisma plugin

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Activity {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Int
  isArchived    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ActivityEntry ActivityEntry[]
}

model Feature {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SPECIFIED
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  permissions Json
  staff       Staff[]  @relation(fields: [staffIds], references: [id])
  staffIds    String[] @db.ObjectId
}

model Staff {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  email           String            @unique
  dateOfBirth     String?
  authKey         String
  gender          Gender            @default(NOT_SPECIFIED)
  isSuperUser     Boolean           @default(false)
  isSuspended     Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isDeleted       Boolean           @default(false)
  roles           Role[]            @relation(fields: [roleIds], references: [id])
  roleIds         String[]          @db.ObjectId
  responses       ResponseVersion[]
  activityEntries ActivityEntry[]
  Ledger          Ledger[]
  Audit           Audit[]
}

model Variant {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  description     String
  price           Int
  barcode         String
  isAvailable     Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  product         Product?        @relation(fields: [productId], references: [id])
  productId       String
  ActivityEntry   ActivityEntry[] @relation(fields: [activityEntryId], references: [id])
  activityEntryId String[]        @db.ObjectId
  isArchived      Boolean         @default(false)
}

model Product {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  brand      String
  imageUrl   String[]
  isArchived Boolean   @default(false)
  variants   Variant[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Ip {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ip          String   @unique
  description String
  createdAt   DateTime @default(now())
}

enum FormPurpose {
  INVENTORY
  CUSTOMER
  STAFF
  ACTIVITY_ENTRY
  NO_PURPOSE
}

model Form {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  purpose           FormPurpose
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  allFormVersions   FormVersion[] @relation("allFormVersions")
  latestFormVersion FormVersion?  @relation("latestFormVersion", fields: [latestFormId], references: [id])
  latestFormId      String?       @unique
}

model FormVersion {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  body            Json
  version         DateTime          @default(now())
  // link to the owner form. On update of primary key do not do anything.
  // The version should not be assigned to another form.
  form            Form              @relation("allFormVersions", references: [id], fields: [formId], onUpdate: NoAction)
  latestForm      Form?             @relation("latestFormVersion")
  formId          String
  ResponseVersion ResponseVersion[]
}

model Response {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  allResponseVersions     ResponseVersion[] @relation("allResponseVersions")
  latestResponseVersion   ResponseVersion?  @relation("latestResponseVersion", fields: [latestResponseVersionId], references: [id])
  latestResponseVersionId String?           @unique @db.ObjectId
  customer                Customer?         @relation(fields: [customerId], references: [id])
  customerId              String?           @db.ObjectId
  activityEntry           ActivityEntry?    @relation(fields: [activityEntryId], references: [id])
  activityEntryId         String?           @db.ObjectId
}

model ResponseVersion {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  body           Json
  version        DateTime    @default(now())
  respondent     Staff       @relation(references: [id], fields: [staffId])
  staffId        String      @db.ObjectId
  latestResponse Response?   @relation("latestResponseVersion")
  response       Response?   @relation("allResponseVersions", references: [id], onUpdate: NoAction, fields: [responseId])
  responseId     String      @db.ObjectId
  formVersion    FormVersion @relation(fields: [formVersionId], references: [id])
  formVersionId  String      @db.ObjectId
}

model Customer {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  gender          Gender
  dateOfBirth     String
  email           String          @unique // property is unique so the tenant can use it as a unique identifier
  phone           String?
  responses       Response[]
  isDeleted       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  activityEntries ActivityEntry[]
  Ledger          Ledger[]
}

model ActivityEntry {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  customer   Customer   @relation(fields: [customerId], references: [id])
  activity   Activity?  @relation(fields: [activityId], references: [id])
  products   Variant[]  @relation(fields: [variantId], references: [id])
  variantId  String[]   @db.ObjectId
  customerId String     @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activityId String?    @db.ObjectId
  author     Staff      @relation(fields: [staffId], references: [id])
  staffId    String     @db.ObjectId
  responses  Response[]
  tipCharged Int        @default(0)
  // The reason why the charge is 1 to many because we can't have more than one charge that is
  // not linked to an activity entry (have activityEntryId as null).
  charge     Ledger[]
}

model Ledger {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  amount          Int
  description     String?
  customer        Customer       @relation(fields: [customerId], references: [id])
  activityEntry   ActivityEntry? @relation(fields: [activityEntryId], references: [id])
  createdBy       Staff          @relation(fields: [staffId], references: [id])
  createdDt       DateTime       @default(now())
  customerId      String         @db.ObjectId
  staffId         String         @db.ObjectId
  activityEntryId String?        @db.ObjectId
}

model Audit {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  staffId        String   @db.ObjectId
  endpointMethod String
  params         String?
  payload        String?
  createdBy      Staff    @relation(fields: [staffId], references: [id])
  createdAt      DateTime @default(now())
}
